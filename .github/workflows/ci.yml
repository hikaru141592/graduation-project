name: CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-${{ github.sha }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-
            ${{ runner.os }}-ruby-

      - name: Install dependencies
        run: |
          docker compose run --rm web bundle install  # docker-composeで依存関係をインストール

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: docker compose run --rm web bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-${{ github.sha }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-
            ${{ runner.os }}-ruby-

      - name: Install dependencies
        run: |
          docker compose run --rm web bundle install

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: docker compose run --rm web bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-${{ github.sha }}-${{ runner.os }}
          restore-keys: |
            ${{ runner.os }}-ruby-${{ hashFiles('**/Gemfile.lock') }}-
            ${{ runner.os }}-ruby-

      - name: Install dependencies
        run: |
          docker compose run --rm web bundle install

      - name: Lint code for consistent style
        run: docker compose run --rm web bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/hikaru_test
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker compose build

      - name: Prepare test database (inside Docker)
        run: |
          docker compose run --rm \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432/hikaru_test \
            web bash -lc "bundle exec rails db:create db:migrate"

      - name: Run RSpec (inside Docker)
        run: |
          docker compose run --rm \
            -e RAILS_ENV=test \
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432/hikaru_test \
            web bash -lc "bundle exec rspec"
